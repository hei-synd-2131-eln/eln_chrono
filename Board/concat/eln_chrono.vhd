-- VHDL Entity Board.ElN_chrono.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 11:54:06 21.03.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY ElN_chrono IS
    PORT( 
        button4_n : IN     std_uLogic;
        clock     : IN     std_ulogic;
        reset_n   : IN     std_ulogic;
        restart_n : IN     std_uLogic;
        sensor_n  : IN     std_uLogic;
        start_n   : IN     std_uLogic;
        stop_n    : IN     std_uLogic;
        testMode  : IN     std_uLogic;
        LCD_A0    : OUT    std_uLogic;
        LCD_CS1_n : OUT    std_uLogic;
        LCD_RST_n : OUT    std_uLogic;
        LCD_SCL   : OUT    std_uLogic;
        LCD_SI    : OUT    std_uLogic;
        LED1      : OUT    std_uLogic;
        LED2      : OUT    std_ulogic;
        LEDs_n    : OUT    std_ulogic_vector (1 TO 8);
        coil1_n   : OUT    std_ulogic;
        coil2_n   : OUT    std_uLogic;
        coil3_n   : OUT    std_uLogic;
        coil4_n   : OUT    std_uLogic;
        motorOn1  : OUT    std_ulogic;
        motorOn2  : OUT    std_ulogic
    );

-- Declarations

END ElN_chrono ;





-- VHDL Entity Chronometer.chronoCircuit.symbol
--
-- Created:
--          by - oliver.gubler.UNKNOWN (WE5370)
--          at - 10:00:23 15.11.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY chronoCircuit IS
    GENERIC( 
        clockFrequency  : real     := 66.0E6;
        lcdSpiFrequency : real     := 20.0E6;
        pwmFrequency    : real     := 100.0E3;
        stepFrequency   : real     := 100.0;
        amplitudeBitNb  : positive := 8;
        testLineNb      : positive := 8
    );
    PORT( 
        button4  : IN     std_uLogic;
        clock    : IN     std_ulogic;
        reset    : IN     std_ulogic;
        restart  : IN     std_uLogic;
        sensor   : IN     std_uLogic;
        start    : IN     std_uLogic;
        stop     : IN     std_uLogic;
        testMode : IN     std_uLogic;
        A0       : OUT    std_uLogic;
        CS1_n    : OUT    std_uLogic;
        RST_n    : OUT    std_uLogic;
        SCL      : OUT    std_uLogic;
        SI       : OUT    std_uLogic;
        coil1    : OUT    std_uLogic;
        coil2    : OUT    std_uLogic;
        coil3    : OUT    std_uLogic;
        coil4    : OUT    std_uLogic;
        testOut  : OUT    std_uLogic_vector (1 TO testLineNb)
    );

-- Declarations

END chronoCircuit ;





LIBRARY ieee;
USE ieee.std_logic_1164.all;

PACKAGE gates IS

--  constant gateDelay: time := 1 ns;
  constant gateDelay: time := 0.1 ns;

END gates;




-- VHDL Entity gates.bufferUlogic.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 21:51:40 12.06.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY bufferUlogic IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END bufferUlogic ;





ARCHITECTURE sim OF bufferUlogic IS
BEGIN
  out1 <= in1 after delay;
END ARCHITECTURE sim;




--
-- VHDL Architecture Chronometer.chronoCircuit.studentVersion
--
-- Created:
--          by - oliver.gubler.UNKNOWN (WE5370)
--          at - 10:49:51 15.11.2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;


ARCHITECTURE studentVersion OF chronoCircuit IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL direction          : std_ulogic;
    SIGNAL en1Hz              : std_uLogic;
    SIGNAL enStep             : std_uLogic;
    SIGNAL resetTime          : std_ulogic;
    SIGNAL restartTickCounter : std_uLogic;
    SIGNAL stepCoil           : std_ulogic;
    SIGNAL tickDone           : std_uLogic;
    SIGNAL tickstep           : std_uLogic;


    -- Component Declarations
    COMPONENT bufferUlogic
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : bufferUlogic USE ENTITY gates.bufferUlogic;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I4 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => resetTime,
            out1 => testOut(1)
        );
    I5 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => en1Hz,
            out1 => testOut(2)
        );
    I6 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => enStep,
            out1 => testOut(3)
        );
    I7 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => direction,
            out1 => testOut(4)
        );
    I8 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => stepCoil,
            out1 => testOut(5)
        );
    I9 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => tickstep,
            out1 => testOut(6)
        );
    I10 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => restartTickCounter,
            out1 => testOut(7)
        );
    I11 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => tickDone,
            out1 => testOut(8)
        );

END studentVersion;




-- VHDL Entity gates.inverter.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 21:51:40 12.06.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY inverter IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        in1  : IN     std_uLogic;
        out1 : OUT    std_uLogic
    );

-- Declarations

END inverter ;





ARCHITECTURE sim OF inverter IS
BEGIN
  out1 <= NOT in1 after delay;
END sim;




-- VHDL Entity gates.logic1.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 21:51:40 12.06.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY logic1 IS
    PORT( 
        logic_1 : OUT    std_uLogic
    );

-- Declarations

END logic1 ;





ARCHITECTURE sim OF logic1 IS
BEGIN
  logic_1 <= '1';
END sim;




-- VHDL Entity sequential.DFF.symbol
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 21:51:41 12.06.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
-- LIBRARY gates;
  use work.gates.all;

ENTITY DFF IS
    GENERIC( 
        delay : time := gateDelay
    );
    PORT( 
        CLK : IN     std_uLogic;
        CLR : IN     std_uLogic;
        D   : IN     std_uLogic;
        Q   : OUT    std_uLogic
    );

-- Declarations

END DFF ;





ARCHITECTURE sim OF DFF IS
BEGIN

  process(clk, clr)
  begin
    if clr = '1' then
      q <= '0' after delay;
    elsif rising_edge(clk) then
      q <= d after delay;
    end if;
  end process;

END sim;




--
-- VHDL Architecture Board.ElN_chrono.struct
--
-- Created:
--          by - silvan.zahno.UNKNOWN (WE6996)
--          at - 11:54:06 21.03.2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
-- LIBRARY gates;
  use work.gates.all;

-- LIBRARY Chronometer;
-- LIBRARY sequential;

ARCHITECTURE struct OF ElN_chrono IS

    -- Architecture declarations
    constant clockFrequency: real := 66.0E6;
    constant lcdSpiFrequency: real := 10.0E6;
    constant pwmFrequency: real := 100.0E3;
    constant stepFrequency: real := 100.0;
    constant amplitudeBitNb: positive := 4;
    constant testLineNb: positive := 8;

    -- Internal signal declarations
    SIGNAL button4      : std_uLogic;
    SIGNAL button4Synch : std_uLogic;
    SIGNAL coil1        : std_uLogic;
    SIGNAL coil2        : std_uLogic;
    SIGNAL coil3        : std_uLogic;
    SIGNAL coil4        : std_uLogic;
    SIGNAL reset        : std_ulogic;
    SIGNAL reset1       : std_ulogic;
    SIGNAL resetSynch   : std_ulogic;
    SIGNAL resetSynch_n : std_ulogic;
    SIGNAL restart      : std_uLogic;
    SIGNAL restartSynch : std_uLogic;
    SIGNAL sensor       : std_uLogic;
    SIGNAL sensorSynch  : std_uLogic;
    SIGNAL start        : std_uLogic;
    SIGNAL startSynch   : std_uLogic;
    SIGNAL stop         : std_uLogic;
    SIGNAL stopSynch    : std_uLogic;
    SIGNAL testOut      : std_uLogic_vector(1 TO testLineNb);


    -- Component Declarations
    COMPONENT chronoCircuit
    GENERIC (
        clockFrequency  : real     := 66.0E6;
        lcdSpiFrequency : real     := 20.0E6;
        pwmFrequency    : real     := 100.0E3;
        stepFrequency   : real     := 100.0;
        amplitudeBitNb  : positive := 8;
        testLineNb      : positive := 8
    );
    PORT (
        button4  : IN     std_uLogic ;
        clock    : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        restart  : IN     std_uLogic ;
        sensor   : IN     std_uLogic ;
        start    : IN     std_uLogic ;
        stop     : IN     std_uLogic ;
        testMode : IN     std_uLogic ;
        A0       : OUT    std_uLogic ;
        CS1_n    : OUT    std_uLogic ;
        RST_n    : OUT    std_uLogic ;
        SCL      : OUT    std_uLogic ;
        SI       : OUT    std_uLogic ;
        coil1    : OUT    std_uLogic ;
        coil2    : OUT    std_uLogic ;
        coil3    : OUT    std_uLogic ;
        coil4    : OUT    std_uLogic ;
        testOut  : OUT    std_uLogic_vector (1 TO testLineNb)
    );
    END COMPONENT;
    COMPONENT bufferUlogic
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT inverter
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic1
    PORT (
        logic_1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT DFF
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        D   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
--     FOR ALL : DFF USE ENTITY sequential.DFF;
--     FOR ALL : bufferUlogic USE ENTITY gates.bufferUlogic;
--     FOR ALL : chronoCircuit USE ENTITY Chronometer.chronoCircuit;
--     FOR ALL : inverter USE ENTITY gates.inverter;
--     FOR ALL : logic1 USE ENTITY gates.logic1;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    I0 : chronoCircuit
        GENERIC MAP (
            clockFrequency  => clockFrequency,
            lcdSpiFrequency => lcdSpiFrequency,
            pwmFrequency    => pwmFrequency,
            stepFrequency   => stepFrequency,
            amplitudeBitNb  => amplitudeBitNb,
            testLineNb      => testLineNb
        )
        PORT MAP (
            button4  => button4Synch,
            clock    => clock,
            reset    => resetSynch,
            restart  => restartSynch,
            sensor   => sensorSynch,
            start    => startSynch,
            stop     => stopSynch,
            testMode => testMode,
            A0       => LCD_A0,
            CS1_n    => LCD_CS1_n,
            RST_n    => LCD_RST_n,
            SCL      => LCD_SCL,
            SI       => LCD_SI,
            coil1    => coil1,
            coil2    => coil2,
            coil3    => coil3,
            coil4    => coil4,
            testOut  => testOut
        );
    I26 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => testOut(7),
            out1 => LED2
        );
    I27 : bufferUlogic
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => testOut(4),
            out1 => LED1
        );
    I1 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => reset_n,
            out1 => reset
        );
    I7 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => resetSynch_n,
            out1 => resetSynch
        );
    I8 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => sensor_n,
            out1 => sensor
        );
    I9 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => restart_n,
            out1 => restart
        );
    I10 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => stop_n,
            out1 => stop
        );
    I11 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => start_n,
            out1 => start
        );
    I12 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => coil4,
            out1 => coil4_n
        );
    I13 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => coil3,
            out1 => coil3_n
        );
    I14 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => coil2,
            out1 => coil2_n
        );
    I15 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => coil1,
            out1 => coil1_n
        );
    I18 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(8),
            out1 => LEDs_n(8)
        );
    I19 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(7),
            out1 => LEDs_n(7)
        );
    I20 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(6),
            out1 => LEDs_n(6)
        );
    I21 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(5),
            out1 => LEDs_n(5)
        );
    I22 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(1),
            out1 => LEDs_n(1)
        );
    I23 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(2),
            out1 => LEDs_n(2)
        );
    I24 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(3),
            out1 => LEDs_n(3)
        );
    I25 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => testOut(4),
            out1 => LEDs_n(4)
        );
    I29 : inverter
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            in1  => button4_n,
            out1 => button4
        );
    I16 : logic1
        PORT MAP (
            logic_1 => motorOn1
        );
    I17 : logic1
        PORT MAP (
            logic_1 => motorOn2
        );
    I28 : logic1
        PORT MAP (
            logic_1 => reset1
        );
    I2 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => restart,
            Q   => restartSynch
        );
    I3 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => start,
            Q   => startSynch
        );
    I4 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => stop,
            Q   => stopSynch
        );
    I5 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => sensor,
            Q   => sensorSynch
        );
    I6 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => reset,
            D   => reset1,
            Q   => resetSynch_n
        );
    I30 : DFF
        GENERIC MAP (
            delay => 1 ns
        )
        PORT MAP (
            CLK => clock,
            CLR => resetSynch,
            D   => button4,
            Q   => button4Synch
        );

END struct;




